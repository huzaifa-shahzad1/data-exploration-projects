-- 1. Data Exploration
SELECT * FROM INFORMATION_SCHEMA.TABLES
WHERE TABLE_SCHEMA IN ('bronze', 'silver', 'gold')
;

SELECT * FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'dim_customers'
ORDER BY ordinal_position
;

-- 2. Dimensions Exploration
SELECT 
	DISTINCT country
FROM gold.dim_customers
ORDER BY country
;

SELECT DISTINCT
	category,
	product_line,
	subcategory,
	product_name
FROM gold.dim_products
ORDER BY 1, 2, 3, 4
;

-- 3. Date Exploration

-- First and Last Order and difference between them
SELECT 
	MIN(order_date) AS first_order,
	MAX(order_date) AS last_order,
	DATE_PART('year', AGE(MAX(order_date), MIN(order_date))) AS order_years,
	DATE_PART('year', AGE(MAX(order_date), MIN(order_date))) * 12 +
	DATE_PART('month', AGE(MAX(order_date), MIN(order_date))) AS order_months,
	(DATE_PART('year', AGE(MAX(order_date), MIN(order_date))) * 12 +
	DATE_PART('month', AGE(MAX(order_date), MIN(order_date)))) * 30 + 
	DATE_PART('day', AGE(MAX(order_date), MIN(order_date))) AS days_diff
FROM gold.fact_sales
;

-- Youngest and Oldest Customer
SELECT 
	DATE_PART('year', AGE(MIN(birth_date))) AS oldest_customer,
	DATE_PART('year', AGE(MAX(birth_date))) AS youngest_customer
FROM gold.dim_customers
;

-- 4. Measures Exploration
SELECT
	SUM(sales_amount) AS total_sales,
	SUM(quantity) AS total_items_sold,
	ROUND(AVG(price), 2) AS avg_selling_price,
	COUNT(DISTINCT order_number) AS total_orders
FROM gold.fact_sales
;

SELECT
	COUNT(product_id) as total_products
FROM gold.dim_products
;
SELECT
	COUNT(DISTINCT product_id) as total_products
FROM gold.dim_products
;


SELECT 
	COUNT(DISTINCT customer_id) AS total_customers
FROM gold.dim_customers
;

SELECT 
	COUNT(DISTINCT customer_key) AS total_customers
FROM gold.fact_sales
;

-- Combine report for all Metrices
SELECT 'Total Sales' AS measure_name, SUM(sales_amount) AS measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total Quantity' AS measure_name, SUM(quantity) AS measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Average Price' AS measure_name, ROUND(AVG(price), 0) AS measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total Nr. Orders' AS measure_name, COUNT(DISTINCT order_number) AS measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total Nr. Products' AS measure_name, COUNT(DISTINCT product_id) AS measure_value FROM gold.dim_products
UNION ALL
SELECT 'Total Nr. Customers' AS measure_name, COUNT(DISTINCT customer_id) AS measure_value FROM gold.dim_customers
;

-- 5. Magnitude Analysis

-- Total customers by Country
SELECT
	country,
	COUNT(*) AS total_customers
FROM gold.dim_customers
GROUP BY country
ORDER BY total_customers DESC
;

-- Total customers by Gender
SELECT
	gender,
	COUNT(*) AS total_customers
FROM gold.dim_customers
GROUP BY gender
ORDER BY total_customers DESC
;

-- Total Products by Category
SELECT 
	category,
	COUNT(product_key) AS total_products
FROM gold.dim_products
GROUP BY category
ORDER BY total_products DESC
;

-- Average cost in each category
SELECT
	category,
	ROUND(AVG(cost), 0) AS avg_cost
FROM gold.dim_products 
GROUP BY category
ORDER BY avg_cost DESC
;

-- Total Revenue generated for each Category
SELECT
	pr.category,
	SUM(sl.sales_amount) AS total_revenue
FROM gold.fact_sales AS sl
LEFT JOIN gold.dim_products as pr
	ON sl.product_key = pr.product_key
GROUP BY pr.category
ORDER BY total_revenue DESC
;

SELECT * FROM gold.dim_products LIMIT 3;
SELECT * FROM gold.fact_sales LIMIT 3;

-- Total Revenue generated by each customer
SELECT 
	s.customer_key,
	c.first_name,
	c.last_name,
	SUM(sales_amount) AS total_revenue
FROM gold.fact_sales AS s
LEFT JOIN gold.dim_customers as c
	ON s.customer_key = c.customer_key
GROUP BY s.customer_key, c.first_name, c.last_name
ORDER BY total_revenue DESC
;

-- Total Distributions of items sold across countries
SELECT
	country,
	SUM(quantity) AS total_items
FROM gold.fact_sales AS s
LEFT JOIN gold.dim_customers as c
	ON s.customer_key = c.customer_key
GROUP BY country
ORDER BY total_items DESC
;

-- 6. Ranking Analysis

-- Top 5 products by revenue

SELECT 
	product_name,
	SUM(sales_amount) AS total_revenue
FROM gold.fact_sales AS s
JOIN gold.dim_products AS p
	ON s.product_key = p.product_key
GROUP BY product_name
ORDER BY total_revenue DESC
LIMIT 5
;

-- 5 worst-performing products in terms of sales
SELECT 
	product_name,
	SUM(sales_amount) AS total_revenue
FROM gold.fact_sales AS s
JOIN gold.dim_products AS p
	ON s.product_key = p.product_key
GROUP BY product_name
ORDER BY total_revenue 
LIMIT 5
;

-- Top 5 sub-categories by revenue

SELECT 
	subcategory,
	SUM(sales_amount) AS total_revenue
FROM gold.fact_sales AS s
JOIN gold.dim_products AS p
	ON s.product_key = p.product_key
GROUP BY subcategory
ORDER BY total_revenue DESC
LIMIT 5
;

-- 5 worst-performing sub-category in terms of sales
SELECT 
	subcategory,
	SUM(sales_amount) AS total_revenue
FROM gold.fact_sales AS s
JOIN gold.dim_products AS p
	ON s.product_key = p.product_key
GROUP BY subcategory
ORDER BY total_revenue 
LIMIT 5
;

-- Top 10 customers who have generated most revenue
SELECT *
FROM (
	SELECT 
		s.customer_key,
		c.first_name,
		c.last_name,
		SUM(sales_amount) AS total_revenue,
		RANK() OVER(ORDER BY SUM(sales_amount) DESC) AS cust_rank
	FROM gold.fact_sales AS s
	LEFT JOIN gold.dim_customers as c
		ON s.customer_key = c.customer_key
	GROUP BY s.customer_key, c.first_name, c.last_name
)t 
WHERE cust_rank <= 10
;

SELECT 
	s.customer_key,
	c.first_name,
	c.last_name,
	COUNT(DISTINCT order_number) AS total_orders
FROM gold.fact_sales AS s
LEFT JOIN gold.dim_customers as c
	ON s.customer_key = c.customer_key
GROUP BY s.customer_key, c.first_name, c.last_name
ORDER BY total_orders 
LIMIT 3
;
